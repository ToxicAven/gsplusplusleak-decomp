// 
// Decompiled by Procyon v0.5.36
// 

package com.gamesense.client.module.modules.exploits;

import net.minecraft.util.math.Vec2f;
import com.gamesense.client.manager.managers.PlayerPacketManager;
import com.gamesense.api.util.player.PlayerPacket;
import com.gamesense.api.util.player.RotationUtil;
import com.gamesense.api.event.Phase;
import com.gamesense.api.util.render.RenderUtil;
import com.gamesense.api.util.render.GSColor;
import com.gamesense.api.event.events.RenderEvent;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.world.World;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.Vec3i;
import net.minecraft.item.Item;
import com.gamesense.api.util.player.InventoryUtil;
import com.gamesense.client.module.modules.combat.PistonCrystal;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import com.gamesense.api.util.world.BlockUtil;
import net.minecraft.block.BlockAir;
import com.gamesense.client.module.modules.combat.CevBreaker;
import net.minecraft.item.ItemPickaxe;
import net.minecraft.potion.PotionEffect;
import net.minecraft.init.MobEffects;
import net.minecraft.client.Minecraft;
import com.gamesense.api.event.events.DamageBlockEvent;
import me.zero.alpine.listener.EventHandler;
import com.gamesense.api.event.events.OnUpdateWalkingPlayerEvent;
import me.zero.alpine.listener.Listener;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import com.gamesense.api.setting.values.ColorSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.setting.values.DoubleSetting;
import com.gamesense.api.setting.values.ModeSetting;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;

@Declaration(name = "FastBreak", category = Category.Exploits, priority = 250)
public class FastBreak extends Module
{
    ModeSetting mode;
    DoubleSetting startDamage;
    DoubleSetting endDamage;
    BooleanSetting haste;
    BooleanSetting switchPick;
    BooleanSetting switchBack;
    BooleanSetting spammer;
    BooleanSetting ignoreChecks;
    BooleanSetting onlyOnPick;
    BooleanSetting startPick;
    IntegerSetting resetTickDestroy;
    IntegerSetting pickTickSwitch;
    IntegerSetting pickStill;
    IntegerSetting spammerTickDelay;
    IntegerSetting breakerTickDelay;
    BooleanSetting forceRotation;
    IntegerSetting rangeDisableBreaker;
    BooleanSetting display;
    ColorSetting blockColor;
    ColorSetting doneColor;
    ModeSetting renderMode;
    IntegerSetting width;
    BooleanSetting debugChat;
    private int tick;
    private int tickSpammer;
    private int oldslot;
    private int breakTick;
    private int wait;
    private BlockPos lastBlock;
    private boolean pickStillBol;
    private boolean ready;
    private EnumFacing direction;
    private boolean minedBefore;
    private int reseTick;
    private Vec3d lastHitVec;
    @EventHandler
    private final Listener<OnUpdateWalkingPlayerEvent> onUpdateWalkingPlayerEventListener;
    @EventHandler
    private final Listener<DamageBlockEvent> listener;
    
    public FastBreak() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: invokespecial   com/gamesense/client/module/Module.<init>:()V
        //     4: aload_0         /* this */
        //     5: aload_0         /* this */
        //     6: ldc             "Mode"
        //     8: iconst_4       
        //     9: anewarray       Ljava/lang/String;
        //    12: dup            
        //    13: iconst_0       
        //    14: ldc             "Packet"
        //    16: aastore        
        //    17: dup            
        //    18: iconst_1       
        //    19: ldc             "Damage"
        //    21: aastore        
        //    22: dup            
        //    23: iconst_2       
        //    24: ldc             "Instant"
        //    26: aastore        
        //    27: dup            
        //    28: iconst_3       
        //    29: ldc             "Breaker"
        //    31: aastore        
        //    32: invokestatic    java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
        //    35: ldc             "Packet"
        //    37: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerMode:(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)Lcom/gamesense/api/setting/values/ModeSetting;
        //    40: putfield        com/gamesense/client/module/modules/exploits/FastBreak.mode:Lcom/gamesense/api/setting/values/ModeSetting;
        //    43: aload_0         /* this */
        //    44: aload_0         /* this */
        //    45: ldc             "Start Damage"
        //    47: ldc2_w          0.1
        //    50: dconst_0       
        //    51: dconst_1       
        //    52: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerDouble:(Ljava/lang/String;DDD)Lcom/gamesense/api/setting/values/DoubleSetting;
        //    55: putfield        com/gamesense/client/module/modules/exploits/FastBreak.startDamage:Lcom/gamesense/api/setting/values/DoubleSetting;
        //    58: aload_0         /* this */
        //    59: aload_0         /* this */
        //    60: ldc             "End Damage"
        //    62: ldc2_w          0.9
        //    65: dconst_0       
        //    66: dconst_1       
        //    67: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerDouble:(Ljava/lang/String;DDD)Lcom/gamesense/api/setting/values/DoubleSetting;
        //    70: putfield        com/gamesense/client/module/modules/exploits/FastBreak.endDamage:Lcom/gamesense/api/setting/values/DoubleSetting;
        //    73: aload_0         /* this */
        //    74: aload_0         /* this */
        //    75: ldc             "Haste"
        //    77: iconst_0       
        //    78: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //    81: putfield        com/gamesense/client/module/modules/exploits/FastBreak.haste:Lcom/gamesense/api/setting/values/BooleanSetting;
        //    84: aload_0         /* this */
        //    85: aload_0         /* this */
        //    86: ldc             "Switch Pick"
        //    88: iconst_0       
        //    89: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //    92: putfield        com/gamesense/client/module/modules/exploits/FastBreak.switchPick:Lcom/gamesense/api/setting/values/BooleanSetting;
        //    95: aload_0         /* this */
        //    96: aload_0         /* this */
        //    97: ldc             "Switch Back"
        //    99: iconst_1       
        //   100: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //   103: putfield        com/gamesense/client/module/modules/exploits/FastBreak.switchBack:Lcom/gamesense/api/setting/values/BooleanSetting;
        //   106: aload_0         /* this */
        //   107: aload_0         /* this */
        //   108: ldc             "Spammer"
        //   110: iconst_0       
        //   111: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //   114: putfield        com/gamesense/client/module/modules/exploits/FastBreak.spammer:Lcom/gamesense/api/setting/values/BooleanSetting;
        //   117: aload_0         /* this */
        //   118: aload_0         /* this */
        //   119: ldc             "Ignore Checks"
        //   121: iconst_0       
        //   122: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //   125: putfield        com/gamesense/client/module/modules/exploits/FastBreak.ignoreChecks:Lcom/gamesense/api/setting/values/BooleanSetting;
        //   128: aload_0         /* this */
        //   129: aload_0         /* this */
        //   130: ldc             "Only On Pick"
        //   132: iconst_0       
        //   133: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //   136: putfield        com/gamesense/client/module/modules/exploits/FastBreak.onlyOnPick:Lcom/gamesense/api/setting/values/BooleanSetting;
        //   139: aload_0         /* this */
        //   140: aload_0         /* this */
        //   141: ldc             "Start Pick"
        //   143: iconst_0       
        //   144: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //   147: putfield        com/gamesense/client/module/modules/exploits/FastBreak.startPick:Lcom/gamesense/api/setting/values/BooleanSetting;
        //   150: aload_0         /* this */
        //   151: aload_0         /* this */
        //   152: ldc             "Tick Reset Destroy"
        //   154: iconst_0       
        //   155: iconst_0       
        //   156: bipush          50
        //   158: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerInteger:(Ljava/lang/String;III)Lcom/gamesense/api/setting/values/IntegerSetting;
        //   161: putfield        com/gamesense/client/module/modules/exploits/FastBreak.resetTickDestroy:Lcom/gamesense/api/setting/values/IntegerSetting;
        //   164: aload_0         /* this */
        //   165: aload_0         /* this */
        //   166: ldc             "Pick Switch Destroy"
        //   168: bipush          75
        //   170: iconst_0       
        //   171: bipush          90
        //   173: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerInteger:(Ljava/lang/String;III)Lcom/gamesense/api/setting/values/IntegerSetting;
        //   176: putfield        com/gamesense/client/module/modules/exploits/FastBreak.pickTickSwitch:Lcom/gamesense/api/setting/values/IntegerSetting;
        //   179: aload_0         /* this */
        //   180: aload_0         /* this */
        //   181: ldc             "Pick Switch Still"
        //   183: bipush          20
        //   185: iconst_0       
        //   186: bipush          30
        //   188: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerInteger:(Ljava/lang/String;III)Lcom/gamesense/api/setting/values/IntegerSetting;
        //   191: putfield        com/gamesense/client/module/modules/exploits/FastBreak.pickStill:Lcom/gamesense/api/setting/values/IntegerSetting;
        //   194: aload_0         /* this */
        //   195: aload_0         /* this */
        //   196: ldc             "Spammer Delay"
        //   198: iconst_0       
        //   199: iconst_0       
        //   200: bipush          75
        //   202: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerInteger:(Ljava/lang/String;III)Lcom/gamesense/api/setting/values/IntegerSetting;
        //   205: putfield        com/gamesense/client/module/modules/exploits/FastBreak.spammerTickDelay:Lcom/gamesense/api/setting/values/IntegerSetting;
        //   208: aload_0         /* this */
        //   209: aload_0         /* this */
        //   210: ldc             "Breaker Delay"
        //   212: iconst_0       
        //   213: iconst_0       
        //   214: bipush          75
        //   216: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerInteger:(Ljava/lang/String;III)Lcom/gamesense/api/setting/values/IntegerSetting;
        //   219: putfield        com/gamesense/client/module/modules/exploits/FastBreak.breakerTickDelay:Lcom/gamesense/api/setting/values/IntegerSetting;
        //   222: aload_0         /* this */
        //   223: aload_0         /* this */
        //   224: ldc             "Force Rotation"
        //   226: iconst_0       
        //   227: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //   230: putfield        com/gamesense/client/module/modules/exploits/FastBreak.forceRotation:Lcom/gamesense/api/setting/values/BooleanSetting;
        //   233: aload_0         /* this */
        //   234: aload_0         /* this */
        //   235: ldc             "Range Disable Breaker"
        //   237: bipush          15
        //   239: bipush          6
        //   241: bipush          50
        //   243: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerInteger:(Ljava/lang/String;III)Lcom/gamesense/api/setting/values/IntegerSetting;
        //   246: putfield        com/gamesense/client/module/modules/exploits/FastBreak.rangeDisableBreaker:Lcom/gamesense/api/setting/values/IntegerSetting;
        //   249: aload_0         /* this */
        //   250: aload_0         /* this */
        //   251: ldc             "Display"
        //   253: iconst_0       
        //   254: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //   257: putfield        com/gamesense/client/module/modules/exploits/FastBreak.display:Lcom/gamesense/api/setting/values/BooleanSetting;
        //   260: aload_0         /* this */
        //   261: aload_0         /* this */
        //   262: ldc             "Block Color"
        //   264: new             Lcom/gamesense/api/util/render/GSColor;
        //   267: dup            
        //   268: sipush          255
        //   271: iconst_0       
        //   272: iconst_0       
        //   273: invokespecial   com/gamesense/api/util/render/GSColor.<init>:(III)V
        //   276: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerColor:(Ljava/lang/String;Lcom/gamesense/api/util/render/GSColor;)Lcom/gamesense/api/setting/values/ColorSetting;
        //   279: putfield        com/gamesense/client/module/modules/exploits/FastBreak.blockColor:Lcom/gamesense/api/setting/values/ColorSetting;
        //   282: aload_0         /* this */
        //   283: aload_0         /* this */
        //   284: ldc             "Done Color"
        //   286: new             Lcom/gamesense/api/util/render/GSColor;
        //   289: dup            
        //   290: iconst_0       
        //   291: sipush          255
        //   294: iconst_0       
        //   295: invokespecial   com/gamesense/api/util/render/GSColor.<init>:(III)V
        //   298: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerColor:(Ljava/lang/String;Lcom/gamesense/api/util/render/GSColor;)Lcom/gamesense/api/setting/values/ColorSetting;
        //   301: putfield        com/gamesense/client/module/modules/exploits/FastBreak.doneColor:Lcom/gamesense/api/setting/values/ColorSetting;
        //   304: aload_0         /* this */
        //   305: aload_0         /* this */
        //   306: ldc             "Render"
        //   308: iconst_3       
        //   309: anewarray       Ljava/lang/String;
        //   312: dup            
        //   313: iconst_0       
        //   314: ldc             "Outline"
        //   316: aastore        
        //   317: dup            
        //   318: iconst_1       
        //   319: ldc             "Fill"
        //   321: aastore        
        //   322: dup            
        //   323: iconst_2       
        //   324: ldc             "Both"
        //   326: aastore        
        //   327: invokestatic    java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
        //   330: ldc             "Both"
        //   332: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerMode:(Ljava/lang/String;Ljava/util/List;Ljava/lang/String;)Lcom/gamesense/api/setting/values/ModeSetting;
        //   335: putfield        com/gamesense/client/module/modules/exploits/FastBreak.renderMode:Lcom/gamesense/api/setting/values/ModeSetting;
        //   338: aload_0         /* this */
        //   339: aload_0         /* this */
        //   340: ldc             "Width"
        //   342: iconst_1       
        //   343: iconst_1       
        //   344: bipush          10
        //   346: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerInteger:(Ljava/lang/String;III)Lcom/gamesense/api/setting/values/IntegerSetting;
        //   349: putfield        com/gamesense/client/module/modules/exploits/FastBreak.width:Lcom/gamesense/api/setting/values/IntegerSetting;
        //   352: aload_0         /* this */
        //   353: aload_0         /* this */
        //   354: ldc             "Debug Chat"
        //   356: iconst_0       
        //   357: invokevirtual   com/gamesense/client/module/modules/exploits/FastBreak.registerBoolean:(Ljava/lang/String;Z)Lcom/gamesense/api/setting/values/BooleanSetting;
        //   360: putfield        com/gamesense/client/module/modules/exploits/FastBreak.debugChat:Lcom/gamesense/api/setting/values/BooleanSetting;
        //   363: aload_0         /* this */
        //   364: bipush          99
        //   366: putfield        com/gamesense/client/module/modules/exploits/FastBreak.tick:I
        //   369: aload_0         /* this */
        //   370: iconst_0       
        //   371: putfield        com/gamesense/client/module/modules/exploits/FastBreak.tickSpammer:I
        //   374: aload_0         /* this */
        //   375: iconst_0       
        //   376: putfield        com/gamesense/client/module/modules/exploits/FastBreak.breakTick:I
        //   379: aload_0         /* this */
        //   380: bipush          100
        //   382: putfield        com/gamesense/client/module/modules/exploits/FastBreak.wait:I
        //   385: aload_0         /* this */
        //   386: aconst_null    
        //   387: putfield        com/gamesense/client/module/modules/exploits/FastBreak.lastBlock:Lnet/minecraft/util/math/BlockPos;
        //   390: aload_0         /* this */
        //   391: iconst_0       
        //   392: putfield        com/gamesense/client/module/modules/exploits/FastBreak.pickStillBol:Z
        //   395: aload_0         /* this */
        //   396: iconst_0       
        //   397: putfield        com/gamesense/client/module/modules/exploits/FastBreak.ready:Z
        //   400: aload_0         /* this */
        //   401: iconst_0       
        //   402: putfield        com/gamesense/client/module/modules/exploits/FastBreak.minedBefore:Z
        //   405: aload_0         /* this */
        //   406: aconst_null    
        //   407: putfield        com/gamesense/client/module/modules/exploits/FastBreak.lastHitVec:Lnet/minecraft/util/math/Vec3d;
        //   410: aload_0         /* this */
        //   411: new             Lme/zero/alpine/listener/Listener;
        //   414: dup            
        //   415: aload_0         /* this */
        //   416: invokedynamic   BootstrapMethod #0, invoke:(Lcom/gamesense/client/module/modules/exploits/FastBreak;)Lme/zero/alpine/listener/EventHook;
        //   421: iconst_0       
        //   422: anewarray       Ljava/util/function/Predicate;
        //   425: invokespecial   me/zero/alpine/listener/Listener.<init>:(Lme/zero/alpine/listener/EventHook;[Ljava/util/function/Predicate;)V
        //   428: putfield        com/gamesense/client/module/modules/exploits/FastBreak.onUpdateWalkingPlayerEventListener:Lme/zero/alpine/listener/Listener;
        //   431: aload_0         /* this */
        //   432: new             Lme/zero/alpine/listener/Listener;
        //   435: dup            
        //   436: aload_0         /* this */
        //   437: invokedynamic   BootstrapMethod #1, invoke:(Lcom/gamesense/client/module/modules/exploits/FastBreak;)Lme/zero/alpine/listener/EventHook;
        //   442: iconst_0       
        //   443: anewarray       Ljava/util/function/Predicate;
        //   446: invokespecial   me/zero/alpine/listener/Listener.<init>:(Lme/zero/alpine/listener/EventHook;[Ljava/util/function/Predicate;)V
        //   449: putfield        com/gamesense/client/module/modules/exploits/FastBreak.listener:Lme/zero/alpine/listener/Listener;
        //   452: return         
        // 
        // The error that occurred was:
        // 
        // java.lang.NullPointerException
        //     at com.strobel.decompiler.languages.java.ast.NameVariables.generateNameForVariable(NameVariables.java:264)
        //     at com.strobel.decompiler.languages.java.ast.NameVariables.assignNamesToVariables(NameVariables.java:198)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:276)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createConstructor(AstBuilder.java:713)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:549)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Override
    public void onUpdate() {
        if (this.tick != 99 && this.tick++ >= this.wait) {
            final int prev = FastBreak.mc.field_71439_g.field_71071_by.field_70461_c;
            this.ready = true;
            if (this.switchPick.getValue() && this.oldslot != -1) {
                FastBreak.mc.field_71439_g.field_71071_by.field_70461_c = this.oldslot;
                this.oldslot = -1;
            }
            if (!this.pickStillBol) {
                if (this.pickTickSwitch.getValue() != 0 && this.switchPick.getValue()) {
                    this.wait = this.pickStill.getValue();
                    this.tick = 0;
                    this.oldslot = prev;
                    this.pickStillBol = true;
                }
                else {
                    this.tick = 99;
                    FastBreak.mc.field_71439_g.field_71071_by.field_70461_c = prev;
                }
            }
            else {
                this.tick = 99;
            }
        }
        Minecraft.func_71410_x().field_71442_b.field_78781_i = 0;
        FastBreak.mc.field_71442_b.field_78781_i = 0;
        if (this.haste.getValue()) {
            final PotionEffect effect = new PotionEffect(MobEffects.field_76422_e, 80950, 1, false, false);
            FastBreak.mc.field_71439_g.func_70690_d(new PotionEffect(effect));
        }
        if (!this.haste.getValue() && FastBreak.mc.field_71439_g.func_70644_a(MobEffects.field_76422_e)) {
            FastBreak.mc.field_71439_g.func_184589_d(MobEffects.field_76422_e);
        }
        if ((!this.onlyOnPick.getValue() || FastBreak.mc.field_71439_g.func_184614_ca().func_77973_b() instanceof ItemPickaxe) && ((this.mode.getValue().equals("Breaker") && !CevBreaker.isPossible) || CevBreaker.forceBrk) && this.lastBlock != null && this.spammer.getValue() && this.tickSpammer++ >= this.spammerTickDelay.getValue()) {
            this.tickSpammer = 0;
            if (BlockUtil.getBlock(this.lastBlock) instanceof BlockAir) {
                this.minedBefore = true;
                this.reseTick = 0;
                this.lastHitVec = null;
            }
            if (this.minedBefore) {
                if (this.resetTickDestroy.getValue() != 0 && this.reseTick++ >= this.resetTickDestroy.getValue() && !(BlockUtil.getBlock(this.lastBlock) instanceof BlockAir)) {
                    FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, this.lastBlock, this.direction));
                    this.breakerBreak();
                    this.reseTick = 0;
                    this.minedBefore = false;
                    if (this.debugChat.getValue()) {
                        PistonCrystal.printDebug("Reset Block", false);
                    }
                    return;
                }
                if (this.ignoreChecks.getValue() || !(BlockUtil.getBlock(this.lastBlock) instanceof BlockAir)) {
                    if (this.forceRotation.getValue()) {
                        this.setVec3d(this.lastBlock, this.direction);
                    }
                    if (FastBreak.mc.field_71439_g.func_174818_b(this.lastBlock) >= this.rangeDisableBreaker.getValue()) {
                        this.lastBlock = null;
                    }
                    else {
                        this.breakerBreak();
                    }
                }
            }
        }
    }
    
    private void breakerBreak() {
        final Item item = FastBreak.mc.field_71439_g.field_71071_by.func_70448_g().func_77973_b();
        int oldSlot = -1;
        if (!(item instanceof ItemPickaxe) && this.minedBefore && (this.switchBack.getValue() || this.switchPick.getValue())) {
            oldSlot = FastBreak.mc.field_71439_g.field_71071_by.field_70461_c;
            final int slot = InventoryUtil.findFirstItemSlot((Class<? extends Item>)ItemPickaxe.class, 0, 9);
            if (slot != -1) {
                FastBreak.mc.field_71439_g.field_71071_by.field_70461_c = slot;
            }
        }
        FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, this.lastBlock, this.direction));
        if (oldSlot != -1 && this.switchBack.getValue()) {
            this.tick = 0;
            this.oldslot = oldSlot;
            if (!this.minedBefore || (this.mode.getValue().equals("Packet") && !CevBreaker.forceBrk)) {
                this.wait = this.pickTickSwitch.getValue();
                this.pickStillBol = !this.switchBack.getValue();
            }
            else {
                this.wait = this.pickStill.getValue();
            }
        }
    }
    
    private void setVec3d(final BlockPos pos, final EnumFacing side) {
        final BlockPos neighbour = pos.func_177972_a(side);
        final EnumFacing opposite = side.func_176734_d();
        this.lastHitVec = new Vec3d((Vec3i)neighbour).func_72441_c(0.5, 0.5, 0.5).func_178787_e(new Vec3d(opposite.func_176730_m()).func_186678_a(0.5));
    }
    
    private void breakerAlgo(final DamageBlockEvent event) {
        if (this.lastBlock == null || event.getBlockPos().field_177962_a != this.lastBlock.field_177962_a || event.getBlockPos().field_177960_b != this.lastBlock.field_177960_b || event.getBlockPos().field_177961_c != this.lastBlock.field_177961_c) {
            if (this.startPick.getValue()) {
                final int pick = InventoryUtil.findFirstItemSlot((Class<? extends Item>)ItemPickaxe.class, 0, 9);
                if (pick != -1) {
                    FastBreak.mc.field_71439_g.field_71071_by.field_70461_c = pick;
                }
            }
            this.minedBefore = false;
            FastBreak.mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
            FastBreak.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
            this.lastBlock = event.getBlockPos();
            this.direction = event.getEnumFacing();
        }
        if (this.breakerTickDelay.getValue() <= this.breakTick++) {
            this.breakerBreak();
            event.cancel();
            this.breakTick = 0;
        }
        this.wait = this.pickTickSwitch.getValue();
        this.ready = false;
        this.tick = 0;
        if (!CevBreaker.isActive && this.switchPick.getValue()) {
            this.oldslot = InventoryUtil.findFirstItemSlot((Class<? extends Item>)ItemPickaxe.class, 0, 9);
            this.pickStillBol = !this.switchBack.getValue();
        }
    }
    
    private boolean canBreak(final BlockPos pos) {
        final IBlockState blockState = FastBreak.mc.field_71441_e.func_180495_p(pos);
        final Block block = blockState.func_177230_c();
        return block.func_176195_g(blockState, (World)FastBreak.mc.field_71441_e, pos) != -1.0f;
    }
    
    public void onDisable() {
        if (this.haste.getValue()) {
            FastBreak.mc.field_71439_g.func_184589_d(MobEffects.field_76422_e);
        }
        this.breakTick = 0;
    }
    
    @Override
    public void onWorldRender(final RenderEvent event) {
        if (this.lastBlock != null) {
            if (FastBreak.mc.field_71439_g.func_174818_b(this.lastBlock) >= this.rangeDisableBreaker.getValue()) {
                this.lastBlock = null;
            }
            else if (this.display.getValue()) {
                if (this.mode.getValue().equals("Breaker") || CevBreaker.forceBrk || (this.mode.getValue().equals("Packet") && !(BlockUtil.getBlock(this.lastBlock) instanceof BlockAir)) || this.mode.getValue().equals("Packer")) {
                    this.renderBox(this.lastBlock);
                }
                else {
                    this.lastBlock = null;
                }
            }
        }
    }
    
    private void renderBox(final BlockPos blockPos) {
        final GSColor color = this.ready ? this.doneColor.getValue() : this.blockColor.getValue();
        final GSColor gsColor1 = new GSColor(color, 255);
        final GSColor gsColor2 = new GSColor(color, 50);
        final String s = this.renderMode.getValue();
        switch (s) {
            case "Both": {
                RenderUtil.drawBox(blockPos, 1.0, gsColor2, 63);
                RenderUtil.drawBoundingBox(blockPos, 1.0, this.width.getValue(), gsColor1);
                break;
            }
            case "Outline": {
                RenderUtil.drawBoundingBox(blockPos, 1.0, this.width.getValue(), gsColor1);
                break;
            }
            case "Fill": {
                RenderUtil.drawBox(blockPos, 1.0, gsColor2, 63);
                break;
            }
        }
    }
}
